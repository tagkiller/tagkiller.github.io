{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Papa","require","hasBeenClicked","useDropzone","accept","acceptedFiles","rejectedFiles","getRootProps","getInputProps","acceptedFilesItems","map","file","key","path","size","rejectedFilesItems","className","style","height","display","type","onClick","e","preventDefault","dataToWrite","numberOfProcessedFiles","forEach","parse","delimiter","header","complete","csvParsed","questionFormName","data","answer","match","answers","questionLine","fields","Qn","push","length","Object","keys","questionForm","unparsedCsv","unparse","Blob","saveAs","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAwFeA,MAlFf,WACE,IAAMC,EAAOC,EAAQ,IAGjBC,GAAiB,EAJR,EAMuDC,YAAY,CAC9EC,OAAQ,aADHC,EANM,EAMNA,cAAeC,EANT,EAMSA,cAAeC,EANxB,EAMwBA,aAAcC,EANtC,EAMsCA,cAI7CC,EAAqBJ,EAAcK,KAAI,SAAAC,GAAI,OAC/C,wBAAIC,IAAKD,EAAKE,MACXF,EAAKE,KADR,MACiBF,EAAKG,KADtB,aAKIC,EAAqBT,EAAcI,KAAI,SAAAC,GAAI,OAC/C,wBAAIC,IAAKD,EAAKE,MACXF,EAAKE,KADR,MACiBF,EAAKG,KADtB,aAsCF,OACE,yBAAKE,UAAU,MAAMC,MAAO,CAACC,OAAQ,MACnC,yBAAKF,UAAU,YAAYC,MAAO,CAACC,OAAQ,MACzC,wBAASX,EAAa,CAACS,UAAW,WAAYC,MAAO,CAACC,OAAQ,OAC5D,0BAAWV,KACX,sFACA,wEAEF,+BACE,8CACA,4BACGC,GAEH,8CACA,4BACGM,IAGL,wBAAIE,MAAO,CAACE,QAASjB,EAAiB,QAAS,SAvErC,2CAwEV,4BAAQkB,KAAK,SAASC,QApDZ,SAACC,GACfA,EAAEC,iBACFrB,GAAiB,EACjB,IAAMsB,EAAc,GAChBC,EAAyB,EAW7BpB,EAAcqB,SAAQ,SAAAf,GACpBX,EAAK2B,MAAMhB,EAAM,CACfiB,UAAW,KACXC,QAAQ,EACRC,SAAU,SAAAC,GACR,IAAMC,EAAmBD,EAAUE,KAAK,GAAGC,OAAOC,MAAM,iDAAiD,GACnGC,EAAUL,EAAUE,KAAKvB,KAAI,SAAA2B,GAAY,OAAIA,EAAaH,UAChE,IAAKV,EAAYQ,GAAmB,CAClC,IAAMM,EAASP,EAAUE,KAAKvB,KAAI,SAAA2B,GAAY,OAAIA,EAAaE,MAC/Df,EAAYQ,GAAoB,CAAEM,SAAQL,KAAM,IAElDT,EAAYQ,GAAkBC,KAAKO,KAAKJ,KApB5CX,IAC+BpB,EAAcoC,QAC3CC,OAAOC,KAAKnB,GAAaE,SAAQ,SAAAkB,GAC/B,IAAMC,EAAc7C,EAAK8C,QAAQtB,EAAYoB,GAAe,CAAEhB,UAAW,OACnEjB,EAAO,IAAIoC,KAAK,CAACF,GAAc,CAACzB,KAAM,2BAC5C4B,iBAAOrC,EAAD,eAAeiC,EAAf,QAAmC,CAACxB,KAAM,sCAyClD,aCpEY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9deeb47d.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport {useDropzone} from 'react-dropzone';\nimport React from 'react';\nimport { saveAs } from 'file-saver';\nimport './App.css';\n\nfunction App() {\n  const Papa = require('papaparse');\n  const loading = \"Please wait, the file is being prepared\";\n\n  let hasBeenClicked = false;\n\n  const {acceptedFiles, rejectedFiles, getRootProps, getInputProps} = useDropzone({\n    accept: 'text/csv'\n  });\n\n  const acceptedFilesItems = acceptedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n  const rejectedFilesItems = rejectedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n  const onClick = (e) => {\n    e.preventDefault();\n    hasBeenClicked = true;\n    const dataToWrite = {};\n    let numberOfProcessedFiles = 0;\n    const saveFile = () => {\n      numberOfProcessedFiles++;\n      if (numberOfProcessedFiles === acceptedFiles.length) {\n        Object.keys(dataToWrite).forEach(questionForm => {\n          const unparsedCsv = Papa.unparse(dataToWrite[questionForm], { delimiter: '\\t' });\n          const file = new Blob([unparsedCsv], {type: \"text/csv;charset=utf-8\"});\n          saveAs(file, `CNDE_${questionForm}.csv`, {type: \"text/csv;charset=utf-8\"});\n        });\n      }\n    }\n    acceptedFiles.forEach(file => {\n      Papa.parse(file, {\n        delimiter: '\\t',\n        header: true,\n        complete: csvParsed => {\n          const questionFormName = csvParsed.data[0].answer.match(/(.*)_\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}\\.csv/)[1];\n          const answers = csvParsed.data.map(questionLine => questionLine.answer);\n          if (!dataToWrite[questionFormName]) {\n            const fields = csvParsed.data.map(questionLine => questionLine.Qn);\n            dataToWrite[questionFormName] = { fields, data: [] };\n          }\n          dataToWrite[questionFormName].data.push(answers);\n          saveFile();\n        }\n      });\n    });\n  }\n\n  return (\n    <div className=\"App\" style={{height: 500}}>\n      <div className=\"container\" style={{height: 300}}>\n        <div {...getRootProps({className: 'dropzone', style: {height: 500}})}>\n          <input {...getInputProps()} />\n          <p>Drag 'n' drop some files here, or click to select files</p>\n          <em>(Only *.csv and *.txt will be accepted)</em>\n        </div>\n        <aside>\n          <h4>Accepted files</h4>\n          <ul>\n            {acceptedFilesItems}\n          </ul>\n          <h4>Rejected files</h4>\n          <ul>\n            {rejectedFilesItems}\n          </ul>\n        </aside>\n        <h3 style={{display: hasBeenClicked ? 'block': 'none'}}>{loading}</h3>\n        <button type=\"button\" onClick={onClick}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}